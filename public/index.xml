<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Love Tux</title>
    <link>https://jlozada2426.gitlab.io/blog/</link>
    <description>Recent content on Love Tux</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</managingEditor>
    <webMaster>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</webMaster>
    <lastBuildDate>Mon, 15 May 2017 08:12:27 -0400</lastBuildDate>
    
	<atom:link href="https://jlozada2426.gitlab.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using libvirt to host my VM&#39;s.</title>
      <link>https://jlozada2426.gitlab.io/blog/post/install_libvirt/</link>
      <pubDate>Mon, 15 May 2017 08:12:27 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/install_libvirt/</guid>
      <description>Recently I installed Fedora 25 to test some playbooks and other configurations. A co-worker mentioned to use Vagrat but, my exposure was minimal. I only used vagrant to test some applications such as netbox and it uses Virtualbox by default. Previously I have used Virtualbox and Vmware but, I decided to move away from those. First, Virtualbox breaks everytime there is a kernel update. Although there is some commands you can run to recreate the kernel it needs but, why I should do that all the time?</description>
    </item>
    
    <item>
      <title>using vagrant</title>
      <link>https://jlozada2426.gitlab.io/blog/post/using_vagrant/</link>
      <pubDate>Tue, 09 May 2017 13:34:20 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/using_vagrant/</guid>
      <description></description>
    </item>
    
    <item>
      <title>netbox</title>
      <link>https://jlozada2426.gitlab.io/blog/post/netbox/</link>
      <pubDate>Tue, 09 May 2017 12:30:58 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/netbox/</guid>
      <description></description>
    </item>
    
    <item>
      <title>kde</title>
      <link>https://jlozada2426.gitlab.io/blog/post/kde/</link>
      <pubDate>Tue, 09 May 2017 12:17:49 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/kde/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Using Ansible Tower</title>
      <link>https://jlozada2426.gitlab.io/blog/post/using_ansible_tower/</link>
      <pubDate>Tue, 09 May 2017 12:03:11 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/using_ansible_tower/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Use Ansible to Resolve IT Issues Part 2</title>
      <link>https://jlozada2426.gitlab.io/blog/post/use_ansible_to_resolve2/</link>
      <pubDate>Mon, 08 May 2017 15:51:12 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/use_ansible_to_resolve2/</guid>
      <description>After being able automate user creation/deletion, I tackle on how to automate the Cloudera CM install as much as possible. I first started trying to install the rpms with ansible. I discovered the yum and repo modules. They allow me to add a repo and install any rpm available. This what I have:
- name: Add the cloudera-cm repo. yum_repository: name: cloudera-cm description: cloudera-cm repo baseurl: &amp;quot;{{ rpm_repo }}&amp;quot; # http://archive.</description>
    </item>
    
    <item>
      <title>Using Ansible to Resolve IT Issues Part 1</title>
      <link>https://jlozada2426.gitlab.io/blog/post/use_ansible_to_resolve/</link>
      <pubDate>Mon, 08 May 2017 13:32:05 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/use_ansible_to_resolve/</guid>
      <description>After I was able to successfully Install Cloudera CM and create a cluster, I was trying to find a way to reduce the deployment time. The current deployments would take too long, waste over 500 of labor hours and no consistency. I could not meet customer demand for new datanodes or clusters and had a reduced workforce due to contract changes. At first I tried to find an all solution like puppet or foreman.</description>
    </item>
    
    <item>
      <title>Big Data on Openstack</title>
      <link>https://jlozada2426.gitlab.io/blog/post/big_data_on_openstack/</link>
      <pubDate>Mon, 08 May 2017 11:52:33 -0400</pubDate>
      <author>jlozada2426@protonmail.com (Jonathan Lozada De La Matta)</author>
      <guid>https://jlozada2426.gitlab.io/blog/post/big_data_on_openstack/</guid>
      <description>Openstack can be a great solution due to the increase demand of cloud and more resources. But, it can&amp;rsquo;t resolve every issue out there. an Openstack deployment can provide &amp;ldquo;unlimited&amp;rdquo; resources but, is useless if is not architectured for the specific applications that the VM&amp;rsquo;s will be hosting. For example, a previous customer had over 20 regions, configured almost the same and had performance issues. This customer hosted big data applications (Cloudera to be specific) on those VM&amp;rsquo;s, had an older deployment of Openstack ( Icehouse so we could not take advantage of the newer cloud features) and no budget for further expansion and upgrades ( Including software and hardware) but, had the following issues:</description>
    </item>
    
  </channel>
</rss>